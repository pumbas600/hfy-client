// <auto-generated />
using System;
using HfyClientApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HfyClientApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241203230803_HistoryEntryModel")]
    partial class HistoryEntryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HfyClientApi.Models.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EditedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstChapterId")
                        .HasColumnType("text");

                    b.Property<bool>("IsNsfw")
                        .HasColumnType("boolean");

                    b.Property<string>("NextChapterId")
                        .HasColumnType("text");

                    b.Property<string>("PreviousChapterId")
                        .HasColumnType("text");

                    b.Property<string>("SearchableTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subreddit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SyncedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TextHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc");

                    b.HasIndex("FirstChapterId");

                    b.HasIndex("Subreddit");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("HfyClientApi.Models.HistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReadAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserName");

                    b.ToTable("HistoryEntries");
                });

            modelBuilder.Entity("HfyClientApi.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HfyClientApi.Models.StoryMetadata", b =>
                {
                    b.Property<string>("FirstChapterId")
                        .HasColumnType("text");

                    b.Property<string>("CoverArtUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FirstChapterId");

                    b.ToTable("StoryMetadata");
                });

            modelBuilder.Entity("HfyClientApi.Models.Subreddit", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconBackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Subreddits");
                });

            modelBuilder.Entity("HfyClientApi.Models.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HfyClientApi.Models.WhitelistedUser", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("WhitelistedUsers");
                });

            modelBuilder.Entity("HfyClientApi.Models.HistoryEntry", b =>
                {
                    b.HasOne("HfyClientApi.Models.Chapter", "Chapter")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HfyClientApi.Models.User", "User")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HfyClientApi.Models.WhitelistedUser", b =>
                {
                    b.HasOne("HfyClientApi.Models.User", "User")
                        .WithOne("WhitelistedUser")
                        .HasForeignKey("HfyClientApi.Models.WhitelistedUser", "Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HfyClientApi.Models.Chapter", b =>
                {
                    b.Navigation("HistoryEntries");
                });

            modelBuilder.Entity("HfyClientApi.Models.User", b =>
                {
                    b.Navigation("HistoryEntries");

                    b.Navigation("WhitelistedUser");
                });
#pragma warning restore 612, 618
        }
    }
}
